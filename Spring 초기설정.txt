Spring이란?
Java 기반 응용프로그램 기반 프레임워크(개발 할 수 있는 tool),made by Rod Johnson

Maven
자바 프로젝트의 빌드를 자동으로 해주는 도구
개발자가 xml에 작성한 프로젝트 정보를 기반으로 컴파일하고 
라이브러리를 연결하는 등의 작업을 해주는 도구		
		//내가 설정한대로 xml에 연결해준다. 여기서 말하는 xml은 pom.xml을 의미한다.
Maven서버를 통해 라이브러리를 다운 받아 설정하는 작업도 수행한다.
		//Maven이 나오고 gradle이 나옴...

look)https://spring.io/projects/spring-framework#learn
       5.3.19=>가장 최신버전.
maven 프로젝트 만든후 jresystem 경로
라이브러리?)mvnrepository.com
https://mvnrepository.com/artifact/org.springframework/spring-context/5.1.9.RELEASE

<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.1.9.RELEASE</version>
</dependency>

4버전 다운: https://mvnrepository.com/artifact/org.springframework/spring-context/4.3.25.RELEASE
<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>4.3.25.RELEASE</version>
</dependency>
복붙ㄴㄴ=>maven dependencies 숫자바뀐거 확인

https://mvnrepository.com/artifact/org.slf4j/slf4j-api/1.7.26
<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.26</version>
</dependency>
logback: https://mvnrepository.com/artifact/ch.qos.logback/logback-classic/1.2.3
	<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
	<dependency>
	    <groupId>ch.qos.logback</groupId>
	    <artifactId>logback-classic</artifactId>
	    <version>1.2.3</version>
	    <scope>test</scope>
	</dependency>


IoC(Inversion of Control):제어 역전		//흐름을 내가 제어하는 것이 아니라 스프링이 제어한다..!
일반적으로 프로그래밍을 작성할 때 프로그램이 흘러가는 흐름이나
생성되는 객체에 대한 제어권을 개발자가 가지는 것과 달리 프레임워크가 가지는 것을 의미한다.

//항상 프로그램을 만들때 pom과 jre system Library  경로 맞춰주고 시작하기~



스프링 프레임워크는 iOc 컨테이너를 이용해 Bean객체를 관리한다.

Beanfactory
클래스를 통해 객체를 생성하고 이를 전달한다.
bean에 관련된 설정을 위한 xml 파일은 즉시 로딩하지만 객체는 개발자가 요구할 때 생성한다.

XmlBeanFactory


ApplicationContext
클래스를 통해 객체를 생성하고 이를 전달한다.
bean에 관련된 설정을 위한 xml 파일은 즉시 로딩하면서 객체를 미리 생성해서 가지고 있다.

ClassPathXmlApplicationContext
FileSystemXmlApplicationContext
XmlWebApplicationContext
=========================================================================

Spring Bean 객체 생성
bean 태그 : 사용할 Bean을 정의하는 태그
bean 태그의 기본 속성
* class: 객체를 생성하기 위해 사용할 클래스
* id: 객체를 가져오기 위해 사용하는 이름
* lazy-init:싱글톤인 경우 xml을 로딩할 때 객체 생성 여부를 설정
	true: xml 로딩 시 객체를 생성하지 않고 객체를 가져올 때 생성한다.

* scope: 객체의 범위를 설정한다
	singleton: 객체를 하나만 생성해서 사용한다.
	prototype: 객체를 가져올 때 마다 객체를 생성한다.(같은 id라 하더라도)


=========================================================================Bean 객체의 생명 주기

* Spring의 Bean은 다음과 같은 상황일 때 객체가 생성된다.
* Singleton인 경우 xml파일을 로딩할 때 객체가 생성된다.
* Singleton 이고 lazy-init속성이 true일 경우 getBean메서드를 사용할 때 객체가 생성된다.
* prototype일 경우 getBean 메서드를 사용할 때 객체가 생성된다.

* Spring의 Bean은 IoC컨테이너가 종료할 때 객체가 소멸된다.

* 객체가 생성되면 가장 먼저 생성자가 호출된다.

* init-method: 생성자 호출 이후 자동으로 호출된다.
* destroy-method: 객체가 소멸될 때 자동으로 호출된다.
* default-init-method: init-method를 설정하지 않은 경우 자동으로 호출된다.
* default-destroy-method: destroy-method를 설정하지 않은 경우 자동으로 호출된다.

메서드가 없을 경우
* default-init-method: 아무일도 발생하지 않는다.
* default-destroy-method: 아무 일도 발생하지 않는다.

* init-method: 오류가 발생한다.
* destroy-method: 오류가 발생한다.

Spring에서는 객체가 생성될 때 호출될 메서드와 소멸될 때 호출될 메서드를 지정할 수 있다.

=========================================================================
BeanPostProcessor
* Bean 객체를 정의할 때 init-method 속성을 설정하면 객체가 생성될 때 자동으로 호출될 메서드를 
지정할 수 있다.
* 이 때 BeanPostProcessor 인터페이스를 구현한 클래스를 정의하면 Bean 객체를 생성할 때
init 메서드 호출을 가로채 다른 메서드를 호출할 수 있도록 할 수 있다.

* postProcessBeforeInitialization : init-method에 지정된 메서드가 호출되기 전에 호출된다.
* postProcessAfterInitialization : init-method에 지정된 메서드가 호출된 후에 호출된다.

Spring에서는 객체가 생성될 때 init-method로 지정된 메서드가 호출되기 전,후에 다른 메서드를 
호출할 수 있도록 지원하고 있다.

======================================================================
의존성 주입(Dependency Injection) 	//DI라고 한다     

* 중요한 개념
* Bean 객체를 생성할 때 Bean 객체가 관리할 값이나 객체를 주입하는 것을 의미
* Bean 객체 생성 후 Bean객체가 가질 기본 값을 자바코드로 설정하는 것이 아닌
  Bean을 정의하는 xml 코드에서 정의하는 개념이다.
* Bean을 정의할 때 constructor-arg 태그를 이용해 주입하게 되면 생성자를 통해
  주입할 수 있다.

생성자를 통한 주입
* value : 기본 자료형 값과 문자열 값을 설정한다.
* ref : 객체를 설정한다.
* type : 저장할 값의 타입을 설정한다.
* index : 지정된 값을 주입할 생성자의 매개변수 인덱스 번호

Bean 객체를 생성할 때 객체의 기본값을 생성자를 통해 주입할 수 있다.

===============================================================
Setter 메서드를 통한 주입

Bean을 정의 할 때 Bean객체가 가지고 있을 기본 값을 생성자가 아닌
Setter 메서드를 통해 주입

* name: 데이터를 주입할 프로퍼티 이름
* value: 기본 자료형 및 문자열을 주입할 때 사용하는 속성
* ref: 객체의 주소 값을 주입할 때 사용하는 속성

Bean 객체를 생성할 때 객체의 기본값을 Setter 메서드를 통해 주입할 수 있다.

================================================================
컬렉션 주입

Bean을 정의할 때 주입해야하는 멤버가 커랙션일 경우 컬랙션이 관리할 객체를 초기에 설정할 수 있다.

List,Map,Set,Property
================================================================
자동 주입
Bean을 정의할 때 주입할 객체는 생성자를 통한 주입이나 setter를 통한 주입을 했다.
Spring에서는 객체를 주입할 때 자동으로 주입될 수 있도록 설정할 수 있다.
자동 주입은 이름,타입,생성자를 통할 수 있으며 auto wire라는 용어로 부른다.

byName : 빈 객체의 프로퍼티 이름과 정의된 빈의 이름이 같은 것을 찾아 자동으로 주입

byType : 빈 객체의 프로퍼티 타입과 정의된 빈의 타입이 일치할 경우 주입
이 때, 동일 타입의 빈이 두 개 이상 정의되어 있으면 오류 발생
constructor : 생성자의 매개 변수 타입과 정의된 빈의 타입이 일치할 경우 주입
이 때, 동일 타입의 빈이 두 개 이상 정의되어 있으면 오류 발생

Bean 객체를 정의할 때 빈의 이름, 타입 등을 이용해 자동 주입을 설정할 수 있다.

=================================================================
Java 코드를 활용한 Bean 등록

beans.xml 파일에 등록했던 내용을 java파일에서 작업
@Configuration 어노테이션은 현재 자바 파일이 빈 등록을 위한 자바 파일임을 알려 준다.
@Bean 어노테이션은 bean 객체를 정의할 때 사용
   메서드의 이름은 bean의 이름이 된다.
@Bean(name=이름) : bean의 이름을 새롭게 정의한다.
@Lazy : lazy-init 속성을 지정한다.
@scope : bean의 scope를 설정
@Primary : primary 속성을 지정한다.

@Configuration 과 @Bean어노테이션 활용해 Bean을 등록한다.

=================================================================
initMethod와 destroyMethod를 이용하여 객체 생성 및 소멸시 호출될 메서드 등록

====================================================================
JavaDI

@Bean(autowire=주입방식) : 자동 주입 방식을 설정한다.
Autowire.BY_NAME : 이름을 통한 자동 주입
Autowire.BY_TYPE : 타입을 통한 자동 주입

autowire 속성을 활용하여 자동 주입을 설정할 수 있다.

========================================================================
어노테이션을 이용한 빈 설정

빈 설정 파일에 다음과 같은 코드를 추가하면 빈에 대한 설정을 xml 파일이 아닌 빈 클래스의 어노테이션을 검색해 반영하게 된다.

	<context:annotation-config/>

@Required : 반드시 주입해야 할 프로퍼티로 설정한다.
Spring 5.1 버전부터 Deprecated 되었다. 반드시 주입해야 할 프로퍼티는 생성자 주입을 이용하도록 변경되었다.

@Autowired
객체 타입을 통해 bean 객체를 자동으로 주입한다.

@Qualifier
@Autowired로 주입시 같은 타입의 Bean이 여러 개 정의되어 있다면 Qualifier에 설정되어 있는 bean을 찾아 주입한다.
 
생성자 주입
생성자에 주입시 참조 변수 타입 변수들은 자동으로 주입되고 기본 자료형 및 문자열 값만 주입을 설정해주면 된다.

스프링의 다양한 어노테이션을 활용해 Bean객체에 대한 설정을 할 수 있다.

=====================================================================
JSR-250

// 스프링자체에서는 제공 안해주기 때문에 외부 라이브러리를 사용.
// https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api/1.3.2

@postConstruct: 생성자 호출 후 호출될 메서드를 등록한다.
@preDestroy: 객체 소멸 전 자동으로 호출될 함수를 등록한다.
@Resource: Bean의 이름을 통해 주입한다.

===============================================================
Component

@Component 어노테이션을 사용하면 Bean Configuration 파일에 Bean을 등록하지 않아도 자동으로 등록된다. 

//component는 같은 타입 하나만 가능(지정해주면 가능하긴 하다)


//등록과 주입은 다르다...!
//자동 등록을 컴포넌트로 시켜서 오토와이어드로 해주면 자동 주입이 된다. 주입이 됏나 안됐나 확인하려면
//겟을 호출하는 것.
//가져왔는지 확인하려면 메인클래스에서 테스트빈을 겟빈해서 객체생성을 하고 객체가 연결하면
//겟데이터만 호출해서 연결된 걸 가져온다.

================================================================
AOP

Aspect Oriented Programming : 관점 지향 프로그래밍
* 하나의 프로그램을 관점(혹은 관심사)라는 논리적 단위로 분리하여 관리하는 개념
* 로깅, 감사, 선언적 트랜젝션, 보안, 캐싱 등 다양한 곳에서 사용되고 있다.
* 여기에서는 메서드 호출을 관심사로 설정하여 AOP에 관한 실습을 진행한다.
* 관심사를 통해 Spring Framework가 어떤 메서드가 호출되는지 관심있게 지켜보다가 특정 메서드가 호출되면 자동으로 전과 후에 다른 메서드가 호출 될 수 있도록 한다.

Spring AOP 용어
* Joint Point: 모듈이 삽입되어 동작하게 되는 특정 위치(메서드 호출 등)
* Point Cut: 다양한 Joint Point중에 어떤 것을 사용할 지 선택
* Advice: Joint Point에 삽입되어 동작할 수 있는 코드
* Weaving: Advice를 핵심 로직 코드에 적용하는 것
* Aspect: Point Cut + Advice

Spring AOP Advice 종류
* before: 메서드 호출 전에 동작하는 Advice
* after-returning: 예외없이 호출된 메서드의 동작이 완료되면 동작하는 Advice
* after-throwing: 호출된 메서드 동작 중 예외가 발생했을 때 동작하는 Advice
* after: 예외 발생 여부에 관계없이 호출된 메서드의 동작이 완료되면 동작하는 Advice
* around: 메서드 호출 전과 후에 동작하는 Advice

AOP 구현
XML
@AspectJ

https://mvnrepository.com/artifact/org.aspectj/aspectjweaver/1.9.4

<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.4</version>
    <scope>runtime</scope>
</dependency>

beans.xml에 xmlns:aop="http://www.springframework.org/schema/aop" 그리고 xsi:schemaLocation="http://www.springframework.org/schema/aop/spring-aop.xsd"> 추가해주기
























